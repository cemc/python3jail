python3jail: A chroot jail for Python 3

This is a module to be used in conjunction with the 
safeexec module `https://github.com/cemc/safeexec` in order
to securely run unknown user code on your machine.

The approach with safeexec is to use resource limits (rlimits)
in conjunction with walling off large parts of the file system.
It is the chroot (change root) command that lets us run the user code
within a small subdirectory of the overall file system, treating
that subdirectory as if it were the root (/).

The good news is that this approach is language-independent and 
based on simple and well-understood commands available throughout
modern linux installations.

The bad news is that when you cut off most of the file system, you
might want need some of it back, for example shared libraries as we explain
below. Getting copies of all these necessities is what takes the most work
on the administrative side.


- this directory contains an installation of Python 3.
 Depending on your operating system or machine architecture,
 you may instead have to install it yourself into this directory.
- you also need to add linux file system links to null, random, unrandom
- you also need to copy some library/lib64 .so files into the jail and to usr/lib64
- this also contains "maketrace", "static", and "OnlinePythonTutor", used for our applications


How to refresh the jail (e.g. if Python is patched).
NB: the reasons for the other random lib and lib64, etc files are not covered here.

in jail:
sudo rm python3 lib/libpython*
sudo rm -r bin include lib/pkgconfig lib/python* share

in Python-3.x.x source dir, reinstall python with jail as prefix:
./configure --prefix=/whatever/path/to/python3jail
make
sudo make install

in jail:
cp bin/python3 .

if needed, in jail/dev (src: http://www.cyberciti.biz/faq/howto-run-nginx-in-a-chroot-jail/):
sudo /bin/mknod -m 0666 null c 1 3
sudo /bin/mknod -m 0666 random c 1 8
sudo /bin/mknod -m 0444 urandom c 1 9

run maintenance